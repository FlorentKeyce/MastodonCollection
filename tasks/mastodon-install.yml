---

- name: Ajouter clé NodeJS
# apt_key module deprecated
  get_url:
    url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
    dest: /etc/apt/trusted.gpg.d/nodesource.asc # .asc filename extension to avoid gpg --dearmor
  when: ansible_os_family == "Debian"

- name: Ajouter le dépôt NodeJS 16
  apt_repository:
    repo: "deb [signed-by=/etc/apt/trusted.gpg.d/nodesource.asc] https://deb.nodesource.com/node_16.x {{ ansible_distribution_release }} main"
    state: present
    filename: nodesource
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Ajouter clé Yarnpkg
  get_url:
    url: https://dl.yarnpkg.com/debian/pubkey.gpg
    dest: /etc/apt/trusted.gpg.d/yarnpkg.asc
  when: ansible_os_family == "Debian"

- name: Ajouter le dépôt Yarnpkg
  apt_repository:
    repo: "deb [signed-by=/etc/apt/trusted.gpg.d/yarnpkg.asc] https://dl.yarnpkg.com/debian/ stable main"
    state: present
    filename: yarnpkg
    update_cache: yes
  when: ansible_os_family == "Debian"

# Nécessaire sur les distributions incluant une version + récente de NodeJS/Yarn que celle nécessaire
- name: Apt-pinning pour les paquets NodeJS/Yarn
  copy:
    src: files/{{ item }}
    dest: /etc/apt/preferences.d/{{ item }}
  with_items:
  - 99nodesource
  - 99yarnpkg
  when: ansible_os_family == "Debian"

- name: Installation des paquets pour Mastodon (Debian)
  apt:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - postfix
      - imagemagick
      - ffmpeg
      - libpq-dev
      - libxml2-dev
      - libxslt1-dev
      - file
      - git-core
      - libprotobuf-dev
      - protobuf-compiler
      - pkg-config
      - nodejs
      - autoconf
      - bison
      - build-essential
      - libssl-dev
      - libyaml-dev
      - libreadline6-dev
      - zlib1g-dev
      - libncurses5-dev
      - libffi-dev
      - libgdbm-dev
      - redis-server
      - redis-tools
      - libidn11-dev
      - libicu-dev
      - libjemalloc-dev
      - yarn
      - python3-psycopg2
  when: ansible_os_family == "Debian"

- name: Création d'un utilisateur mastodon
  user:
    name: mastodon
    shell: /bin/bash
    home: /home/mastodon
    create_home: yes

# Page d'erreur sur Ubuntu avec juste le logo Mastodon
# Les logs de nginx indiquent plein de permission denied
- name: Modifier les permissions du répertoire de Mastodon
  file:
    path: ~mastodon/
    mode: 0755

# rbenv et ruby-build sont dispos en paquets !!
# Mais dans des versions ne permettant pas d'installer Ruby 3 sur Debian :(
- name: Récupération de l'installeur rbenv
  get_url: 
    url: https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer
    dest: ~/rbenv-installer
  become_user: mastodon
  become: true
  register: rbenv_installer

- name: Installation de rbenv
  command: 
    cmd: bash ~/rbenv-installer
  become_user: mastodon
  become: true
  when: rbenv_installer.changed

- name: Récupérer l'environnement Bash pour rbenv
  command: 
    cmd: ~/.rbenv/bin/rbenv init -
  register: rbenv_bash
  become_user: mastodon
  become: true
  when: rbenv_installer.changed

- name: Configuration de l'environnement Bash pour rbenv
  blockinfile:
    marker: "# {mark} rbenv"
    block: "{{ rbenv_bash.stdout }}"
    path: ~/.bashrc
  become_user: mastodon
  become: true
  when: rbenv_installer.changed

- name: Récupérer la version de Ruby
  shell: 
    cmd: ~/.rbenv/bin/rbenv version | cut -d ' ' -f 1
  register: ruby_installed_version
  become_user: mastodon
  become: true
  changed_when: false

- name: Installer l'environnement Ruby
  shell: 
    cmd: "~/.rbenv/bin/rbenv install -f {{ ruby_version }} && ~/.rbenv/bin/rbenv global {{ ruby_version }}"
  environment:
    RUBY_CONFIGURE_OPTS: --with-jemalloc
  become_user: mastodon
  become: true
  when: ruby_installed_version.stdout != ruby_version

- name: Installer Bundler
  gem:
    name: bundler
    state: present
    executable: ~/.rbenv/shims/gem
    norc: true # Eviter un warning de changement de valeur par défaut
  become_user: mastodon
  become: true

- name: Récupérer Mastodon
  git: 
    repo: https://github.com/mastodon/mastodon.git
    dest: ~/live
    version: "{{ mastodon_version }}"
    force: yes
  become_user: mastodon
  become: true
  register: mastodon_git

- name: Créer le répertoire .bundle
  file:
    path: ~mastodon/live/.bundle
    state: directory
    owner: mastodon
    group: mastodon

- name: Configuration de Bundler
  template:
    src: files/bundler.conf
    dest: ~mastodon/live/.bundle/config
    owner: mastodon
    group: mastodon

- name: Installation de Mastodon
  shell: 
    cmd: ~/.rbenv/shims/bundle install && yarn install --pure-lockfile
    chdir: ~/live/
  become_user: mastodon
  become: true
  when: mastodon_git.changed
  notify: Redémarrer Mastodon

- name: Récupération ou génération de SECRET_KEY_BASE
  shell:
    cmd: SECRET_KEY_BASE=$(grep SECRET_KEY_BASE= ~mastodon/live/.env.production|cut -d '=' -f2); [ -z $SECRET_KEY_BASE ] && RAILS_ENV=production ~/.rbenv/shims/bundle exec rake secret || echo $SECRET_KEY_BASE
    chdir: ~/live/
  become_user: mastodon
  become: true
  changed_when: false
  register: secret_key_base

- name: Récupération ou génération de OTP_SECRET
  shell:
    cmd: OTP_SECRET=$(grep OTP_SECRET= ~mastodon/live/.env.production|cut -d '=' -f2); [ -z $OTP_SECRET ] && ~/.rbenv/shims/bundle exec rake secret || echo $OTP_SECRET
    chdir: ~/live/
  environment:
    RAILS_ENV: production
  become_user: mastodon
  become: true
  changed_when: false
  register: otp_secret

- name: Récupération de VAPID_PRIVATE_KEY
  shell:
    cmd: grep VAPID_PRIVATE_KEY= ~mastodon/live/.env.production | sed -e 's/VAPID_PRIVATE_KEY=//' 
    chdir: ~/live/
  become_user: mastodon
  become: true
  changed_when: false
  register: vapid_private_key

- name: Récupération de VAPID_PUBLIC_KEY
  shell:
    cmd: grep VAPID_PUBLIC_KEY= ~mastodon/live/.env.production | sed -e 's/VAPID_PUBLIC_KEY=//' 
    chdir: ~/live/
  become_user: mastodon
  become: true
  changed_when: false
  register: vapid_public_key

- name: Génération des clés VAPID
  shell:
    cmd: ~/.rbenv/shims/bundle exec rake mastodon:webpush:generate_vapid_key
    chdir: ~/live/
  environment:
    RAILS_ENV: production
  become_user: mastodon
  become: true
  register: vapid_keys
  when: not vapid_private_key.stdout|length or not vapid_public_key.stdout|length

# https://stackoverflow.com/a/60074125
- name: Définition des clés VAPID
  set_fact:
    vapid_private_key: { 'stdout' : "{{ vapid_keys.stdout.splitlines()|
                           select('match', '^VAPID_PRIVATE_KEY=(.*)$')|
                           map('regex_replace', my_regex, my_replace)|first }}" }
    vapid_public_key: { 'stdout' : "{{ vapid_keys.stdout.splitlines()|
                           select('match', '^VAPID_PUBLIC_KEY=(.*)$')|
                           map('regex_replace', my_regex, my_replace)|first }}" }
  vars:
    my_regex: '^([A-Z_]*)=(.*)$'
    my_replace: '\2'
  when: not vapid_private_key.stdout|length or not vapid_public_key.stdout|length  

- name: Configuration de Mastodon
  template:
    src: files/.env.production
    dest: ~mastodon/live/.env.production
    owner: mastodon
    group: mastodon
  notify: Redémarrer Mastodon

- name: Vérifier si la base de données Mastodon existe
  postgresql_db:
    login_host: "{{ postgresql_host }}"
    login_user: "{{ postgresql_user }}"
    login_password: "{{ postgresql_password }}"
    name: "{{ postgresql_database }}"
    state: present
  check_mode: yes
  register: mastodon_db

- name: Mise en place de la base de données
  command: 
    cmd: ~/.rbenv/shims/bundle exec rake db:setup
    chdir: ~/live/
  environment:
    RAILS_ENV: production
  become_user: mastodon
  become: true
  when: mastodon_db.changed

- name: Compilation des assets
  command: 
    cmd: ~/.rbenv/shims/bundle exec rake assets:precompile
    chdir: ~/live/
  environment:
    RAILS_ENV: production
  become_user: mastodon
  become: true
  when: mastodon_git.changed

- name: Installation des services Mastodon
  copy:
    src: ~mastodon/live/dist/{{ item }}
    dest: /etc/systemd/system/{{ item }}
    remote_src: true
  with_items: "{{ mastodon_services }}" 
  notify: Redémarrer Mastodon

- name: Créer le répertoire de configuration du service
  file:
    path: /etc/systemd/system/{{ item }}.d
    state: directory
  with_items: "{{ mastodon_services }}" 

- name: Configuration de l'adresse d'écoute de Mastodon
  template:
    src: files/mastodon-service-bind.conf
    dest: /etc/systemd/system/{{ item }}.d/bind.conf
  with_items: "{{ mastodon_services }}" 
  notify: Redémarrer Mastodon

- name: Activer et lancer Mastodon
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
    daemon_reload: true
  when: ansible_os_family == "Debian"
  with_items: "{{ mastodon_services }}" 
